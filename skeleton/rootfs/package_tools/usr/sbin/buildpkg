#!/bin/dash

# /usr/sbin/buildpkg: a package building script
# dependencies: dash wget, tar, XZ Utils and hpm

# usage: buildpkg download BUILD_SCRIPT (to download package sources)
# or:    buildpkg build    BUILD_SCRIPT (to build a package)

# the command-line usage message
USAGE="buildpkg [download|build] SCRIPT

Build a binary package, according to a build script."

# include the hpm configuration file
. /etc/hpmrc

# usage: download_file $url $dest
# downloads a file
download_file()
{
	if [ -n "$(which aria2c)" ]
	then
		command_line="aria2c -s3 --check-certificate=false"
		[ -n "$2" ] && command_line="$command_line -o $2"
	else
		command_line="wget --no-check-certificate"
		[ -n "$2" ] && command_line="$command_line -O $2"
	fi

	$command_line "$1"
	return $?
}

# check the command-line arguments
if [ 2 -ne $# ] || [ ! -f "$2" ]
then
	echo "$USAGE"
	exit 1
fi

case "$1" in
	download|build)
		;;
	*)
		echo "$USAGE"
		exit 1
		;;
esac

# include the settings file
. /etc/buildpkgrc

# get the full script path
path=$(realpath "$2")

# include the build script
. "$path"

# re-include the settings file
. /etc/buildpkgrc

# re-include the build script
. "$path"

# handle the "download" command
if [ "download" = "$1" ]
then
	download
	[ 0 -ne $? ] && exit 1
	exit 0
fi

# handle the "build" command
INSTALL_DIR="$(mktemp -u -d)"

base_dir="$(pwd)"

# build the package
build
if [ 0 -ne $? ]
then
	echo "Error: failed to build the package."
	exit 1
fi

# create the binary package
package
if [ 0 -ne $? ]
then
	echo "Error: failed to install the package."
	exit 1
fi

cd "$base_dir"

# optimize the package
strippkg $INSTALL_DIR
if [ 0 -ne $? ]
then
	echo "Error: failed to optimize the package."
	exit 1
fi

cd $INSTALL_DIR

# create the binary package
tar -c * | xz -e --best > "$base_dir/$PKG_NAME-$PKG_VER.$PKG_EXTENSION"
if [ 0 -ne $? ]
then
	echo "Error: failed to create the package."
	exit 1
fi

cd "$base_dir"

# clean up
rm -rf $INSTALL_DIR
[ 0 -ne $? ] && exit 1

exit 0
