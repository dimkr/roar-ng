#!/bin/dash

# /init: a system init script
# dependencies: dash and busybox

# the size of the tmpfs file system used as the writeable layer, if no save file
# is used
TMPFS_SIZE="75%"

# include the boot configuration
. /etc/bootrc

# usage: show_error $error
show_error()
{
	echo
	echo "Error: $1"
	sleep 20
	exit 0
}

# clear the screen
clear

# set the executable search path
export PATH="/bin:/sbin:/usr/bin"

# mount all virtual file systems
mount -t rootfs -o remount,rw rootfs /
mount -t proc proc /proc
mount -t sysfs sysfs /sys

# initialize the boot mode variable
boot_mode="live"

# parse the kernel command-line
for argument in $(cat /proc/cmdline)
do
	case "$argument" in
		home=*)
			home_partition="${argument#*=}"
			;;
		boot_mode=*)
			boot_mode="${argument#*=}"
			;;
		sleep=*)
			sleep="${argument#*=}"
			;;
	esac
done

# make sure a valid boot mode was specified
case "$boot_mode" in
	full|frugal)
		[ -z "$home_partition" ] && \
		    show_error "no home partition was specified for \"$boot_mode\" mode"
		;;
	live)
		[ -n "$home_partition" ] && \
		           show_error "a home partition was specified for \"live\" mode"
		;;
	*)
		show_error "invalid boot mode"
		;;
esac

# if the "sleep" argument was passed, sleep for the given number of seconds
case "$sleep" in
	[0-9]*)
		echo -n "Sleeping for $sleep second(s) ..."
		sleep $sleep
		echo " done"
		;;
esac

# generate device nodes for all recognized partitions
mdev -s

# if the home partition was specified through its UUID, determine its name
case "$home_partition" in
	*-*-*-*-*)
		home_partition="$(blkid | \
		                  grep UUID=\"$home_partition\" | \
		                  cut -f 1 -d : | cut -f 3- -d /)"
		[ -z "$home_partition" ] && \
		       show_error "the specified home partition UUID was not recognized"
		;;
esac

# mount the main Squashfs image, located at the file system root
mount /rootfs.sfs /mnt/rootfs -t squashfs -o loop,ro
[ 0 -ne $? ] && show_error "failed to mount the main file system image"

# prepare the writeable layer
case $boot_mode in
	# under "live" mode, use a tmpfs file system
	live)
		mount -t tmpfs -o size=$TMPFS_SIZE,rw tmpfs /mnt/save
		[ 0 -ne $? ] && show_error "failed to mount a tmpfs file system"
		;;

	# under "full" mode, use the home partition
	full)
		# mount the home partition
		mount /dev/$home_partition /mnt/save
		[ 0 -ne $? ] && show_error "failed to mount the home partition"
		;;

	# under "frugal" mode, use an image file contained in the home partition
	frugal)
		# create a mount point
		mkdir /mnt/$home_partition

		# mount the home partition
		mount /dev/$home_partition /mnt/$home_partition
		[ 0 -ne $? ] && show_error "failed to mount the home partition"

		# if there is no save file, offer the user to create one now
		[ ! -f /mnt/$home_partition/$SAVE_FILE_NAME ] && \
		                   create_save_file /mnt/$home_partition/$SAVE_FILE_NAME

		# mount the save file
		mount /mnt/$home_partition/$SAVE_FILE_NAME /mnt/save -o loop,rw
		[ 0 -ne $? ] && show_error "failed to mount the save file"
		;;
esac

# create a union of the writeable file system and the main file system
mount -t aufs -o br=/mnt/save=rw:/mnt/rootfs=ro aufs /mnt/union
[ 0 -ne $? ] && show_error "failed to set up the layered file system"

# list the mounted file systems
file_systems="rootfs"
case $boot_mode in
	# under "live" or "frugal" mode - just the main file system and the
	# writeable layer
	live|full)
		file_systems="$file_systems save"
		;;

	# under "frugal" mode, the home partition has its own mount point
	frugal)
		file_systems="$file_systems $home_partition save"
		;;
esac

# move the mounted file systems to the union file system's /mnt
for file_system in $file_systems
do
	mkdir -p /mnt/union/mnt/$file_system
	mount --move /mnt/$file_system /mnt/union/mnt/$file_system
	[ 0 -ne $? ] && show_error "failed to set up the layered file system"
done

# unmount virtual file systems
umount /proc
umount /sys

# switch to the union file system
exec switch_root /mnt/union /sbin/init
show_error "failed to switch to the layered file system"
