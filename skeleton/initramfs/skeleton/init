#!/bin/dash

# /init: a system init script
# dependencies: dash and busybox

# files to load into the page cache
FILES_TO_PRELOAD="/bin/dash /bin/busybox"

# the size of the tmpfs file system used as the writeable layer, if no save file
# is used
TMPFS_SIZE="75%"

# usage: show_error $error
show_error()
{
	echo
	echo "Error: $1"
	sleep 20
	exit 0
}

# clear the screen
clear

# set the executable search path
export PATH="/bin:/sbin:/usr/bin:/usr/sbin"

# preload all frequently executed binaries
for file in $FILES_TO_PRELOAD
do
	readahead $file
done

# mount all virtual file systems
mount -t rootfs -o remount,rw rootfs /
mount -t proc proc /proc
mount -t sysfs sysfs /sys

# initialize the boot mode boolean
is_live=1

# parse the kernel command-line
for argument in $(cat /proc/cmdline)
do
	case "$argument" in
		root=*)
			root="${argument#*=}"
			is_live=0
			;;
		sleep=*)
			sleep="${argument#*=}"
			;;
	esac
done

# if the "sleep" argument was passed, sleep for the given number of seconds
case "$sleep" in
	[0-9]*)
		echo -n "Sleeping for $sleep second(s) ..."
		sleep $sleep
		echo " done"
		;;
esac

# generate device nodes for all recognized partitions
mdev -s

# if the root partition was specified through its UUID, determine its name
if [ 0 -eq $is_live ]
then
	case "$root" in
		*-*-*-*-*)
			root="$(blkid | \
			        grep UUID=\"$root\" | \
			        cut -f 1 -d : | cut -f 3- -d /)"
			[ -z "$root" ] && \
	       show_error "the specified root partition UUID was not recognized"
			;;
	esac
fi

# mount the main Squashfs image, located at the file system root
mount /rootfs.sfs /mnt/rootfs -t squashfs -o loop,ro
[ 0 -ne $? ] && show_error "failed to mount the main file system image"

# prepare the writeable layer
if [ 1 -eq $is_live ]
then
	# under "live" mode, use a tmpfs file system
	mount -t tmpfs -o size=$TMPFS_SIZE,rw tmpfs /mnt/save
	[ 0 -ne $? ] && show_error "failed to mount a tmpfs file system"
else
	# under "frugal" mode, use the root partition
	mount /dev/$root /mnt/save
	[ 0 -ne $? ] && show_error "failed to mount the root partition"
fi

# create a union of the writeable file system and the main file system
mount -t aufs -o br=/mnt/save=rw:/mnt/rootfs=ro aufs /mnt/union
[ 0 -ne $? ] && show_error "failed to set up the layered file system"

# move the mounted file systems to the union file system's /mnt
for file_system in rootfs save
do
	mkdir -p /mnt/union/mnt/$file_system
	mount --move /mnt/$file_system /mnt/union/mnt/$file_system
	[ 0 -ne $? ] && show_error "failed to set up the layered file system"
done

# unmount virtual file systems
umount /proc
umount /sys

# switch to the union file system
exec switch_root /mnt/union /sbin/init
show_error "failed to switch to the layered file system"
