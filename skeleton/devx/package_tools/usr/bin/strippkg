#!/bin/dash

# /usr/bin/strippkg: a package optimization script
# dependencies: dash, file, advancecomp, optipng, gzip, bzip2, xz and binutils

# the command-line usage message
USAGE="strippkg FILE

Optimize a file or the contents of a directory, recursively."

# list_files()
# purpose: recursively lists all files present under a given path; used to 
#          prevent redundant executions of find when optimize() recurses into
#          files
# input: a path
list_files() {
	if [ -f "$1" ]
	then
		echo "$1"
	else
		if [ -d "$1" ]
		then
			find "$1" -type f

		fi
	fi
}

# optimize()
# purpose: optimizes the contents of a directory or a single file
# input: a path
optimize() {
        list_files "$1" | while read file
        do
                case "$(file -bi "$file" | cut -f 1 -d \;)" in
			application/x-executable|application/x-sharedlib)
				echo "$file (executable or library)"
				strip --strip-all "$file"
				;;
			application/x-object)
				echo "$file (kernel module)"
				strip --strip-unneeded "$file"
				;;
                        application/x-gzip)
                                echo "$file (gzip-compressed)"
                                uncompressed_file="$(mktemp -u)"
                                gzip -d -c "$file" > $uncompressed_file
                                optimize $uncompressed_file
                                gzip --best -c $uncompressed_file > "$file"
                                rm -f $uncompressed_file
                                advdef -z4 "$file"
                                ;;

                        application/x-bzip2)
                                echo "$file (bzip2-compressed)"
                                uncompressed_file="$(mktemp -u)"
                                bzip2 -d -c "$file" > $uncompressed_file
                                optimize $uncompressed_file
                                bzip2 --best -c $uncompressed_file > "$file"
                                rm -f $uncompressed_file
                                ;;

                        application/x-xz)
                                echo "$file (xz-compressed)"
                                uncompressed_file="$(mktemp -u)"
                                xz -d -c "$file" > $uncompressed_file
                                optimize $uncompressed_file
                                xz --best -e -c $uncompressed_file > "$file"
                                rm -f $uncompressed_file
                                ;;

                        image/png)
                                echo "$file (PNG image)"
                                optipng -o7 "$file"
                                advpng -z4 "$file"
                                ;;

                        application/zip)
                                echo "$file (ZIP archive)"
                                uncompressed_archive="$(mktemp -d)"
                                unzip "$file" -d $uncompressed_archive
                                optimize $uncompressed_archive
                                zip -Z deflate -9 "$file" $uncompressed_archive/*
                                rm -rf $uncompressed_archive
                                ;;

                        application/x-tar)
                                echo "$file (tar archive)"
                                extracted_archive="$(mktemp -d)"
                                tar -xf "$file" -C $extracted_archive
                                optimize $extracted_archive
                                base_dir="$(pwd)"
                                cd $extracted_archive
                                tar -c * > "$file"
                                cd "$base_dir"
                                rm -rf $extracted_archive
                                ;;
                esac
        done

	return 0
}

# check the command-line arguments
if [ 1 -ne $# ] || [ ! -e "$1" ]
then
	echo "$USGAE"
	exit 1
fi

optimize "$1"
exit $?
